/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Jp.Digitalmuseum.Kinect
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Frame : TBase
  {
    private int _frameId;
    private byte[] _image;
    private byte[] _depthImage;
    private Position3D _position;
    private Dictionary<JointType, Joint> _joints;
    private THashSet<string> _words;

    public int FrameId
    {
      get
      {
        return _frameId;
      }
      set
      {
        __isset.frameId = true;
        this._frameId = value;
      }
    }

    public byte[] Image
    {
      get
      {
        return _image;
      }
      set
      {
        __isset.image = true;
        this._image = value;
      }
    }

    public byte[] DepthImage
    {
      get
      {
        return _depthImage;
      }
      set
      {
        __isset.depthImage = true;
        this._depthImage = value;
      }
    }

    public Position3D Position
    {
      get
      {
        return _position;
      }
      set
      {
        __isset.position = true;
        this._position = value;
      }
    }

    public Dictionary<JointType, Joint> Joints
    {
      get
      {
        return _joints;
      }
      set
      {
        __isset.joints = true;
        this._joints = value;
      }
    }

    public THashSet<string> Words
    {
      get
      {
        return _words;
      }
      set
      {
        __isset.words = true;
        this._words = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool frameId;
      public bool image;
      public bool depthImage;
      public bool position;
      public bool joints;
      public bool words;
    }

    public Frame() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              FrameId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Image = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              DepthImage = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Position = new Position3D();
              Position.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                Joints = new Dictionary<JointType, Joint>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  JointType _key2;
                  Joint _val3;
                  _key2 = (JointType)iprot.ReadI32();
                  _val3 = new Joint();
                  _val3.Read(iprot);
                  Joints[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Set) {
              {
                Words = new THashSet<string>();
                TSet _set4 = iprot.ReadSetBegin();
                for( int _i5 = 0; _i5 < _set4.Count; ++_i5)
                {
                  string _elem6 = null;
                  _elem6 = iprot.ReadString();
                  Words.Add(_elem6);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Frame");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.frameId) {
        field.Name = "frameId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FrameId);
        oprot.WriteFieldEnd();
      }
      if (Image != null && __isset.image) {
        field.Name = "image";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Image);
        oprot.WriteFieldEnd();
      }
      if (DepthImage != null && __isset.depthImage) {
        field.Name = "depthImage";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(DepthImage);
        oprot.WriteFieldEnd();
      }
      if (Position != null && __isset.position) {
        field.Name = "position";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Position.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Joints != null && __isset.joints) {
        field.Name = "joints";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, Joints.Count));
          foreach (JointType _iter7 in Joints.Keys)
          {
            oprot.WriteI32((int)_iter7);
            Joints[_iter7].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Words != null && __isset.words) {
        field.Name = "words";
        field.Type = TType.Set;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Words.Count));
          foreach (string _iter8 in Words)
          {
            oprot.WriteString(_iter8);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Frame(");
      sb.Append("FrameId: ");
      sb.Append(FrameId);
      sb.Append(",Image: ");
      sb.Append(Image);
      sb.Append(",DepthImage: ");
      sb.Append(DepthImage);
      sb.Append(",Position: ");
      sb.Append(Position== null ? "<null>" : Position.ToString());
      sb.Append(",Joints: ");
      sb.Append(Joints);
      sb.Append(",Words: ");
      sb.Append(Words);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
