/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Jp.Digitalmuseum.Kinect
{
  public partial class KinectService {
    public interface Iface {
      void setVoiceEnabled(bool isEnabled);
      #if SILVERLIGHT
      IAsyncResult Begin_setVoiceEnabled(AsyncCallback callback, object state, bool isEnabled);
      void End_setVoiceEnabled(IAsyncResult asyncResult);
      #endif
      bool isVoiceEnabled();
      #if SILVERLIGHT
      IAsyncResult Begin_isVoiceEnabled(AsyncCallback callback, object state, );
      bool End_isVoiceEnabled(IAsyncResult asyncResult);
      #endif
      void addKeyword(string text);
      #if SILVERLIGHT
      IAsyncResult Begin_addKeyword(AsyncCallback callback, object state, string text);
      void End_addKeyword(IAsyncResult asyncResult);
      #endif
      void removeKeyword(string text);
      #if SILVERLIGHT
      IAsyncResult Begin_removeKeyword(AsyncCallback callback, object state, string text);
      void End_removeKeyword(IAsyncResult asyncResult);
      #endif
      void setDepthEnabled(bool isEnabled);
      #if SILVERLIGHT
      IAsyncResult Begin_setDepthEnabled(AsyncCallback callback, object state, bool isEnabled);
      void End_setDepthEnabled(IAsyncResult asyncResult);
      #endif
      bool isDepthEnabled();
      #if SILVERLIGHT
      IAsyncResult Begin_isDepthEnabled(AsyncCallback callback, object state, );
      bool End_isDepthEnabled(IAsyncResult asyncResult);
      #endif
      void setColorEnabled(bool isEnabled);
      #if SILVERLIGHT
      IAsyncResult Begin_setColorEnabled(AsyncCallback callback, object state, bool isEnabled);
      void End_setColorEnabled(IAsyncResult asyncResult);
      #endif
      bool isColorEnabled();
      #if SILVERLIGHT
      IAsyncResult Begin_isColorEnabled(AsyncCallback callback, object state, );
      bool End_isColorEnabled(IAsyncResult asyncResult);
      #endif
      void setAngle(int angle);
      #if SILVERLIGHT
      IAsyncResult Begin_setAngle(AsyncCallback callback, object state, int angle);
      void End_setAngle(IAsyncResult asyncResult);
      #endif
      int getAngle();
      #if SILVERLIGHT
      IAsyncResult Begin_getAngle(AsyncCallback callback, object state, );
      int End_getAngle(IAsyncResult asyncResult);
      #endif
      Frame getFrame();
      #if SILVERLIGHT
      IAsyncResult Begin_getFrame(AsyncCallback callback, object state, );
      Frame End_getFrame(IAsyncResult asyncResult);
      #endif
      void shutdown();
      #if SILVERLIGHT
      IAsyncResult Begin_shutdown(AsyncCallback callback, object state, );
      void End_shutdown(IAsyncResult asyncResult);
      #endif
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      
      #if SILVERLIGHT
      public IAsyncResult Begin_setVoiceEnabled(AsyncCallback callback, object state, bool isEnabled)
      {
        return send_setVoiceEnabled(callback, state, isEnabled);
      }

      public void End_setVoiceEnabled(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void setVoiceEnabled(bool isEnabled)
      {
        #if !SILVERLIGHT
        send_setVoiceEnabled(isEnabled);

        #else
        var asyncResult = Begin_setVoiceEnabled(null, null, isEnabled);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setVoiceEnabled(AsyncCallback callback, object state, bool isEnabled)
      #else
      public void send_setVoiceEnabled(bool isEnabled)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setVoiceEnabled", TMessageType.Call, seqid_));
        setVoiceEnabled_args args = new setVoiceEnabled_args();
        args.IsEnabled = isEnabled;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_isVoiceEnabled(AsyncCallback callback, object state, )
      {
        return send_isVoiceEnabled(callback, state);
      }

      public bool End_isVoiceEnabled(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_isVoiceEnabled();
      }

      #endif

      public bool isVoiceEnabled()
      {
        #if !SILVERLIGHT
        send_isVoiceEnabled();
        return recv_isVoiceEnabled();

        #else
        var asyncResult = Begin_isVoiceEnabled(null, null, );
        return End_isVoiceEnabled(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_isVoiceEnabled(AsyncCallback callback, object state, )
      #else
      public void send_isVoiceEnabled()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("isVoiceEnabled", TMessageType.Call, seqid_));
        isVoiceEnabled_args args = new isVoiceEnabled_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_isVoiceEnabled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isVoiceEnabled_result result = new isVoiceEnabled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isVoiceEnabled failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addKeyword(AsyncCallback callback, object state, string text)
      {
        return send_addKeyword(callback, state, text);
      }

      public void End_addKeyword(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void addKeyword(string text)
      {
        #if !SILVERLIGHT
        send_addKeyword(text);

        #else
        var asyncResult = Begin_addKeyword(null, null, text);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addKeyword(AsyncCallback callback, object state, string text)
      #else
      public void send_addKeyword(string text)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addKeyword", TMessageType.Call, seqid_));
        addKeyword_args args = new addKeyword_args();
        args.Text = text;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_removeKeyword(AsyncCallback callback, object state, string text)
      {
        return send_removeKeyword(callback, state, text);
      }

      public void End_removeKeyword(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void removeKeyword(string text)
      {
        #if !SILVERLIGHT
        send_removeKeyword(text);

        #else
        var asyncResult = Begin_removeKeyword(null, null, text);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_removeKeyword(AsyncCallback callback, object state, string text)
      #else
      public void send_removeKeyword(string text)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("removeKeyword", TMessageType.Call, seqid_));
        removeKeyword_args args = new removeKeyword_args();
        args.Text = text;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setDepthEnabled(AsyncCallback callback, object state, bool isEnabled)
      {
        return send_setDepthEnabled(callback, state, isEnabled);
      }

      public void End_setDepthEnabled(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void setDepthEnabled(bool isEnabled)
      {
        #if !SILVERLIGHT
        send_setDepthEnabled(isEnabled);

        #else
        var asyncResult = Begin_setDepthEnabled(null, null, isEnabled);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setDepthEnabled(AsyncCallback callback, object state, bool isEnabled)
      #else
      public void send_setDepthEnabled(bool isEnabled)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setDepthEnabled", TMessageType.Call, seqid_));
        setDepthEnabled_args args = new setDepthEnabled_args();
        args.IsEnabled = isEnabled;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_isDepthEnabled(AsyncCallback callback, object state, )
      {
        return send_isDepthEnabled(callback, state);
      }

      public bool End_isDepthEnabled(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_isDepthEnabled();
      }

      #endif

      public bool isDepthEnabled()
      {
        #if !SILVERLIGHT
        send_isDepthEnabled();
        return recv_isDepthEnabled();

        #else
        var asyncResult = Begin_isDepthEnabled(null, null, );
        return End_isDepthEnabled(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_isDepthEnabled(AsyncCallback callback, object state, )
      #else
      public void send_isDepthEnabled()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("isDepthEnabled", TMessageType.Call, seqid_));
        isDepthEnabled_args args = new isDepthEnabled_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_isDepthEnabled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isDepthEnabled_result result = new isDepthEnabled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isDepthEnabled failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setColorEnabled(AsyncCallback callback, object state, bool isEnabled)
      {
        return send_setColorEnabled(callback, state, isEnabled);
      }

      public void End_setColorEnabled(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void setColorEnabled(bool isEnabled)
      {
        #if !SILVERLIGHT
        send_setColorEnabled(isEnabled);

        #else
        var asyncResult = Begin_setColorEnabled(null, null, isEnabled);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setColorEnabled(AsyncCallback callback, object state, bool isEnabled)
      #else
      public void send_setColorEnabled(bool isEnabled)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setColorEnabled", TMessageType.Call, seqid_));
        setColorEnabled_args args = new setColorEnabled_args();
        args.IsEnabled = isEnabled;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_isColorEnabled(AsyncCallback callback, object state, )
      {
        return send_isColorEnabled(callback, state);
      }

      public bool End_isColorEnabled(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_isColorEnabled();
      }

      #endif

      public bool isColorEnabled()
      {
        #if !SILVERLIGHT
        send_isColorEnabled();
        return recv_isColorEnabled();

        #else
        var asyncResult = Begin_isColorEnabled(null, null, );
        return End_isColorEnabled(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_isColorEnabled(AsyncCallback callback, object state, )
      #else
      public void send_isColorEnabled()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("isColorEnabled", TMessageType.Call, seqid_));
        isColorEnabled_args args = new isColorEnabled_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_isColorEnabled()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        isColorEnabled_result result = new isColorEnabled_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isColorEnabled failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_setAngle(AsyncCallback callback, object state, int angle)
      {
        return send_setAngle(callback, state, angle);
      }

      public void End_setAngle(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void setAngle(int angle)
      {
        #if !SILVERLIGHT
        send_setAngle(angle);

        #else
        var asyncResult = Begin_setAngle(null, null, angle);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_setAngle(AsyncCallback callback, object state, int angle)
      #else
      public void send_setAngle(int angle)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("setAngle", TMessageType.Call, seqid_));
        setAngle_args args = new setAngle_args();
        args.Angle = angle;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAngle(AsyncCallback callback, object state, )
      {
        return send_getAngle(callback, state);
      }

      public int End_getAngle(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAngle();
      }

      #endif

      public int getAngle()
      {
        #if !SILVERLIGHT
        send_getAngle();
        return recv_getAngle();

        #else
        var asyncResult = Begin_getAngle(null, null, );
        return End_getAngle(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAngle(AsyncCallback callback, object state, )
      #else
      public void send_getAngle()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAngle", TMessageType.Call, seqid_));
        getAngle_args args = new getAngle_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_getAngle()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAngle_result result = new getAngle_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAngle failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getFrame(AsyncCallback callback, object state, )
      {
        return send_getFrame(callback, state);
      }

      public Frame End_getFrame(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getFrame();
      }

      #endif

      public Frame getFrame()
      {
        #if !SILVERLIGHT
        send_getFrame();
        return recv_getFrame();

        #else
        var asyncResult = Begin_getFrame(null, null, );
        return End_getFrame(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getFrame(AsyncCallback callback, object state, )
      #else
      public void send_getFrame()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getFrame", TMessageType.Call, seqid_));
        getFrame_args args = new getFrame_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Frame recv_getFrame()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getFrame_result result = new getFrame_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFrame failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_shutdown(AsyncCallback callback, object state, )
      {
        return send_shutdown(callback, state);
      }

      public void End_shutdown(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void shutdown()
      {
        #if !SILVERLIGHT
        send_shutdown();

        #else
        var asyncResult = Begin_shutdown(null, null, );

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_shutdown(AsyncCallback callback, object state, )
      #else
      public void send_shutdown()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("shutdown", TMessageType.Call, seqid_));
        shutdown_args args = new shutdown_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["setVoiceEnabled"] = setVoiceEnabled_Process;
        processMap_["isVoiceEnabled"] = isVoiceEnabled_Process;
        processMap_["addKeyword"] = addKeyword_Process;
        processMap_["removeKeyword"] = removeKeyword_Process;
        processMap_["setDepthEnabled"] = setDepthEnabled_Process;
        processMap_["isDepthEnabled"] = isDepthEnabled_Process;
        processMap_["setColorEnabled"] = setColorEnabled_Process;
        processMap_["isColorEnabled"] = isColorEnabled_Process;
        processMap_["setAngle"] = setAngle_Process;
        processMap_["getAngle"] = getAngle_Process;
        processMap_["getFrame"] = getFrame_Process;
        processMap_["shutdown"] = shutdown_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void setVoiceEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setVoiceEnabled_args args = new setVoiceEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.setVoiceEnabled(args.IsEnabled);
        return;
      }
      public void isVoiceEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isVoiceEnabled_args args = new isVoiceEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isVoiceEnabled_result result = new isVoiceEnabled_result();
        result.Success = iface_.isVoiceEnabled();
        oprot.WriteMessageBegin(new TMessage("isVoiceEnabled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addKeyword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addKeyword_args args = new addKeyword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.addKeyword(args.Text);
        return;
      }
      public void removeKeyword_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        removeKeyword_args args = new removeKeyword_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.removeKeyword(args.Text);
        return;
      }
      public void setDepthEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setDepthEnabled_args args = new setDepthEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.setDepthEnabled(args.IsEnabled);
        return;
      }
      public void isDepthEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isDepthEnabled_args args = new isDepthEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isDepthEnabled_result result = new isDepthEnabled_result();
        result.Success = iface_.isDepthEnabled();
        oprot.WriteMessageBegin(new TMessage("isDepthEnabled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setColorEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setColorEnabled_args args = new setColorEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.setColorEnabled(args.IsEnabled);
        return;
      }
      public void isColorEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        isColorEnabled_args args = new isColorEnabled_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        isColorEnabled_result result = new isColorEnabled_result();
        result.Success = iface_.isColorEnabled();
        oprot.WriteMessageBegin(new TMessage("isColorEnabled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void setAngle_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        setAngle_args args = new setAngle_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.setAngle(args.Angle);
        return;
      }
      public void getAngle_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAngle_args args = new getAngle_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAngle_result result = new getAngle_result();
        result.Success = iface_.getAngle();
        oprot.WriteMessageBegin(new TMessage("getAngle", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getFrame_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getFrame_args args = new getFrame_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getFrame_result result = new getFrame_result();
        result.Success = iface_.getFrame();
        oprot.WriteMessageBegin(new TMessage("getFrame", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void shutdown_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        shutdown_args args = new shutdown_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.shutdown();
        return;
      }
    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setVoiceEnabled_args : TBase
    {
      private bool _isEnabled;

      public bool IsEnabled
      {
        get
        {
          return _isEnabled;
        }
        set
        {
          __isset.isEnabled = true;
          this._isEnabled = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool isEnabled;
      }

      public setVoiceEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                IsEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setVoiceEnabled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.isEnabled) {
          field.Name = "isEnabled";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsEnabled);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setVoiceEnabled_args(");
        sb.Append("IsEnabled: ");
        sb.Append(IsEnabled);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isVoiceEnabled_args : TBase
    {

      public isVoiceEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isVoiceEnabled_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isVoiceEnabled_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isVoiceEnabled_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public isVoiceEnabled_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isVoiceEnabled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isVoiceEnabled_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addKeyword_args : TBase
    {
      private string _text;

      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool text;
      }

      public addKeyword_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Text = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addKeyword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Text != null && __isset.text) {
          field.Name = "text";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Text);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addKeyword_args(");
        sb.Append("Text: ");
        sb.Append(Text);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class removeKeyword_args : TBase
    {
      private string _text;

      public string Text
      {
        get
        {
          return _text;
        }
        set
        {
          __isset.text = true;
          this._text = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool text;
      }

      public removeKeyword_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Text = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("removeKeyword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Text != null && __isset.text) {
          field.Name = "text";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Text);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("removeKeyword_args(");
        sb.Append("Text: ");
        sb.Append(Text);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setDepthEnabled_args : TBase
    {
      private bool _isEnabled;

      public bool IsEnabled
      {
        get
        {
          return _isEnabled;
        }
        set
        {
          __isset.isEnabled = true;
          this._isEnabled = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool isEnabled;
      }

      public setDepthEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                IsEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setDepthEnabled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.isEnabled) {
          field.Name = "isEnabled";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsEnabled);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setDepthEnabled_args(");
        sb.Append("IsEnabled: ");
        sb.Append(IsEnabled);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isDepthEnabled_args : TBase
    {

      public isDepthEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isDepthEnabled_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isDepthEnabled_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isDepthEnabled_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public isDepthEnabled_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isDepthEnabled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isDepthEnabled_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setColorEnabled_args : TBase
    {
      private bool _isEnabled;

      public bool IsEnabled
      {
        get
        {
          return _isEnabled;
        }
        set
        {
          __isset.isEnabled = true;
          this._isEnabled = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool isEnabled;
      }

      public setColorEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                IsEnabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setColorEnabled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.isEnabled) {
          field.Name = "isEnabled";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsEnabled);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setColorEnabled_args(");
        sb.Append("IsEnabled: ");
        sb.Append(IsEnabled);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isColorEnabled_args : TBase
    {

      public isColorEnabled_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isColorEnabled_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isColorEnabled_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class isColorEnabled_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public isColorEnabled_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("isColorEnabled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("isColorEnabled_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class setAngle_args : TBase
    {
      private int _angle;

      public int Angle
      {
        get
        {
          return _angle;
        }
        set
        {
          __isset.angle = true;
          this._angle = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool angle;
      }

      public setAngle_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Angle = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("setAngle_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.angle) {
          field.Name = "angle";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Angle);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("setAngle_args(");
        sb.Append("Angle: ");
        sb.Append(Angle);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAngle_args : TBase
    {

      public getAngle_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAngle_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAngle_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAngle_result : TBase
    {
      private int _success;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getAngle_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAngle_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAngle_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFrame_args : TBase
    {

      public getFrame_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFrame_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFrame_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getFrame_result : TBase
    {
      private Frame _success;

      public Frame Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getFrame_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Frame();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getFrame_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getFrame_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class shutdown_args : TBase
    {

      public shutdown_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("shutdown_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("shutdown_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
